"""
Copyright (c) 2018 Alexander Fink

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

def bruteforce(checker, charset, chars_per_iteration=1, lazy=True, dfs=True, include_path=False, max_length=0, join=None):
    from itertools import product

    chars_per_iteration = max(1, chars_per_iteration)
    max_length = max(0, max_length)

    paths = [[]]

    results = []

    if join is None:
        class nopjoin:
            join = lambda self, x: x
        join = nopjoin()

    while len(paths) > 0:
        path = paths.pop() if dfs else paths.pop(0)
        if max_length == 0 or len(path) < max_length:
            rpt = chars_per_iteration if max_length == 0 else min(chars_per_iteration, max_length-len(path))
            hit = False
            for values in product(charset, repeat=rpt):
                new = path+list(values)
                res = checker(join.join(new))
                if res == True:
                    hit = True
                    paths.append(new)
                    if lazy:
                        break
                elif res == False:
                    pass
                else:
                    raise ValueError("checker did not return a boolean")
            else:
                if lazy:
                    return join.join(path)
                if include_path or not hit:
                    results.append(path)
        else:
            results.append(path)
            if lazy:
                return join.join(path)
    return [join.join(result) for result in results]